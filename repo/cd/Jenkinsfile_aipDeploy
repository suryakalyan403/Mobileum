pipeline {
    agent any

    parameters {
        choice(
            name: 'MICROSERVICE',
            choices: ['all', 'portal', 't80', 't50', 't52', 't54', 't55', 't56'],
            description: 'Select microservices'
        )
        choice(
            name: 'METHODS',
            choices: ['install', 'upgrade', 'deploy-to-portal', 'restart', 'update-secret'],
            description: 'Select deployment methods'
        )
        choice(
            name: 'SATELLITE',
            choices: ['', 'satellite'],
            description: 'To deploy satellite pods'
        )
        choice(
            name: 'SATMICROSERVICE',
            choices: ['', 'sat1', 'sat2', 'sat3', 'sat4', 'sat5', 'sat6'],
            description: 'Select satellite microservices'
        )
        choice(
            name: 'SECRETS',
            choices: ['', 'product-config', 'license'],
            description: 'Select secrets'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Dry run mode'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip Tests'
        )
    }

    environment {
        DEPLOYMENT_DIR = "${WORKSPACE}/../src/bin"
        MICROSERVICES  = "portal t80 t50 t52 t54 t55 t56"
        TERM           = "xterm"
    }

    stages {
        stage('Pre-deployment Checks') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh ''' 
                        which mc 
                        export KUBECONFIG=$KUBECONFIG
                        echo "Kubeconfig file: $KUBECONFIG"
                        kubectl cluster-info
                    '''
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/suryakalyan403/Mobileum.git',
                        credentialsId: 'git-creds'
                    ]],
                    extensions: [[
                        $class: 'CloneOption',
                        depth: 1,
                        noTags: true,
                        shallow: true
                    ]]
                ])
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    // Determine services to deploy
                    def servicesToDeploy = (params.MICROSERVICE == 'all') ?
                        env.MICROSERVICES.split() : [params.MICROSERVICE]

                    def method        = params.METHODS
                    def selectSat     = params.SATELLITE?.trim()
                    def selectService = params.SATMICROSERVICE?.trim()
                    def selectSecret  = params.SECRETS?.trim()
                    def dryRunFlag    = params.DRY_RUN ? "dry-run" : ""

                    // Wrap deployment in kubeconfig credentials
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        servicesToDeploy.each { service ->
                            stage("Deploy ${service}") {
                                try {
                                    // Build risk-man.sh command
                                    def cmdParts = ["bash", "risk-man.sh", method, service]

                                    if (selectSat) {
                                        cmdParts << selectSat
                                        if (selectService) {
                                            cmdParts << selectService
                                        }
                                    }

                                    // Add secrets only if method == update-secret
                                    if (method == "update-secret" && selectSecret) {
                                        cmdParts << selectSecret
                                    }

                                    if (params.DRY_RUN) {
                                        cmdParts << dryRunFlag
                                    }

                                    def finalCmd = cmdParts.join(" ")
                                    echo "Generated Command: ${finalCmd}"

                                    sh """
                                        cd ${env.DEPLOYMENT_DIR}
                                        export TERM=xterm
                                        export KUBECONFIG=$KUBECONFIG
                                        echo "y" | ${finalCmd}
                                    """

                                } catch (Exception e) {
                                    error "Failed to deploy ${service}: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Successful deployment: ${params.MICROSERVICE} - ${env.BUILD_URL}"
        }
        failure {
            echo "❌ Failed Deployment: ${params.MICROSERVICE} - ${env.BUILD_URL}"
            archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
        }
        always {
            cleanWs()
        }
    }
}

