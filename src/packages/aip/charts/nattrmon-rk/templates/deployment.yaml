apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aip.names.fullname" . }}
  labels: {{- include "aip.labels.standard" . | nindent 4 }}
  annotations: {{- include "aip.annotations.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "aip.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "aip.labels.matchLabels" . | nindent 8 }}
        {{- if .Values.customPodLabels }}
          {{- include "aip.renderer" ( dict "value" .Values.customPodLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
     {{- with .Values.tolerations }}
      tolerations:
    {{ toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken | default false }}
      serviceAccountName: {{ include "aip.names.fullname" . }}
      affinity:
        nodeAffinity: {{- include "aip.affinities.nodes" .Values.nodeAffinity | nindent 10 }}
        podAffinity: {{- include "aip.affinities.pods" .Values.podAffinity | nindent 10 }}
        podAntiAffinity: {{- include "aip.affinities.pods" .Values.podAntiAffinity | nindent 10 }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- include "aip.images.imagePullSecrets" ( dict "pullSecrets" .Values.image.pullSecrets) | nindent 6 }}
      containers:
        - name: nattrmon
          image: {{ include "aip.images.image" ( dict "image" .Values.image )}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePolicy: FallbackToLogsOnError
          resources: {{ include "aip.resources.requests" ( dict "resources" .Values.resources "context" $ ) | nindent 12 }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env: {{- include "aip.env.standard" . | nindent 12 }}
            - name : DEBUG
              value: {{ .Values.deployment.DEBUG | default false | quote }}
            - name : JSONLOG
              value: "true"
            - name : PLUGSORDER
              value: {{ .Values.deployment.PLUGSORDER | default "outputs,inputs,validations" | quote }} 
            - name : NAM_CONFIG
              value: "/configs/config.zip"
            - name : NAM_METHOD
              value: "local"
            - name : NAM_KUBE_NAMESPACE
              value: {{ .Values.deployment.NAM_KUBE_NAMESPACE | default .Release.Namespace | quote }}
            - name : NAM_KUBE_RAID
              value: {{ .Values.deployment.raidComponentPodName }}
            - name : JVM_MEMMSPERC
              value: {{ .Values.deployment.JVM_MEMMSPERC | default "50.0" | quote }}
            - name : JVM_MEMMXPERC
              value: {{ .Values.deployment.JVM_MEMMXPERC | default "80.0" | quote }}
            - name : OAF_JARGS
              value: " -XX:InitialRAMPercentage={{ .Values.deployment.JVM_MEMMSPERC }} -XX:MaxRAMPercentage={{ .Values.deployment.JVM_MEMMXPERC }} {{ .Values.deployment.OAF_JARGS }}" 
            - name : JAVA_ARGS
              value: " -XX:InitialRAMPercentage={{ .Values.deployment.JVM_MEMMSPERC }} -XX:MaxRAMPercentage={{ .Values.deployment.JVM_MEMMXPERC }} {{ .Values.deployment.OAF_JARGS }}" 
            - name : LIBS
              value: {{ .Values.deployment.LIBS | default "s3.js" | quote }}
            {{- if .Values.deployment.CHANNEL_WNOTS.enabled }} 
            {{- if eq (.Values.deployment.CHANNEL_WNOTS.type | default "e") "elasticsearch" }}
            - name : CHANNEL_WNOTS
              value: "{ type: '{{ .Values.deployment.CHANNEL_WNOTS.type }}', options: { index: '{{ .Values.deployment.CHANNEL_WNOTS.options.index }}', secKey: '{{ .Values.deployment.CHANNEL_WNOTS.options.secKey }}', secBucket: '{{ .Values.deployment.CHANNEL_WNOTS.options.secBucket }}', secFile: '{{ .Values.deployment.CHANNEL_WNOTS.options.secFile }}' } }"
            {{- end }}
            {{- if eq (.Values.deployment.CHANNEL_WNOTS.type | default "e") "s3" }}  
            - name : CHANNEL_WNOTS 
              value: "{ type: '{{ .Values.deployment.CHANNEL_WNOTS.type }}', options: { secKey: '{{ .Values.deployment.CHANNEL_WNOTS.options.secKey }}', secBucket: '{{ .Values.deployment.CHANNEL_WNOTS.options.secBucket }}', secFile: '{{ .Values.deployment.CHANNEL_WNOTS.options.secFile }}', multifile: {{ default true .Values.deployment.CHANNEL_WNOTS.options.multifile }}, gzip: {{ default true .Values.deployment.CHANNEL_WNOTS.options.gzip }} } }"
            {{- end }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.deployment.port }}
              protocol: TCP
          volumeMounts:
            - name: nattrmon-configs
              mountPath: /configs/config.zip
              subPath: config.zip
            - name: nattrmon-secrets
              mountPath: /secrets/secrets.yaml
              subPath: secrets.yaml
            {{- include "aip.volumes.mount.catrust" ( dict "caTrust" .Values.caTrust) | nindent 12 }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
      volumes:
        - name: nattrmon-configs
          configMap:
            {{- if .Values.nattrmon.configMap }}
            name: {{ .Values.nattrmon.configMap }}
            {{- else }}
            name: {{ include "aip.names.fullname" . }}-configs
            {{- end }}
        - name: nattrmon-secrets
          secret:
            {{- if .Values.nattrmon.secrets }}
            secretName: {{ .Values.nattrmon.secrets }}
            {{- else }}
            secretName: {{ include "aip.names.fullname" . }}-secrets
            {{- end }}
        {{- include "aip.volumes.catrust" ( dict "caTrust" .Values.caTrust) | nindent 8 }}
