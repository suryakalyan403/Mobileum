apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aip.names.fullname" . }}
  annotations: {{- include "aip.annotations.standard" . | nindent 4 }}
  labels: {{- include "aip.labels.standard" . | nindent 4 }}
spec:
  replicas:  {{ .Values.config.replica_count }}
  selector:
    matchLabels: {{- include "aip.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "aip.labels.matchLabels" . | nindent 8 }}
      {{- if .Values.customPodLabels }}
        {{- include "aip.renderer" ( dict "value" .Values.customPodLabels "context" $ ) | nindent 8 }}
      {{- end }}
    spec:
      {{- if (default .Values.rbac.enabled false) }}
      serviceAccountName: {{ include "aip.names.fullname" . }}-sa
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
 {{ toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken | default false }}
      affinity:
        nodeAffinity: {{- include "aip.affinities.nodes" .Values.nodeAffinity | nindent 10 }}
        podAffinity: {{- include "aip.affinities.pods" .Values.podAffinity | nindent 10 }}
        podAntiAffinity: {{- include "aip.affinities.pods" .Values.cleanupPodAntiAffinity | nindent 10 }}
      securityContext:
        fsGroup: 0
      containers:
      - name: {{ include "aip.names.fullname" . }}-pod
        image: {{ include "aip.images.image" ( dict "image" .Values.image )}}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        terminationMessagePolicy: FallbackToLogsOnError
        resources: {{ include "aip.resources.requests" ( dict "resources" .Values.config.resources "context" $ ) | nindent 12 }}
        envFrom:
          - configMapRef:
              name: {{ include "aip.names.fullname" . }}-cfg
          - secretRef:
              name: {{ include "aip.names.fullname" . }}-kc-secrets
          {{- if eq .Values.db.database_vendor "postgres" }}
          - secretRef:
              name: {{ include "aip.names.fullname" . }}-db-secrets
          {{- end }}
        env:
        {{- include "aip.env.standard" . | nindent 8 }}
        {{- if .Values.buildEnvs }}
        {{- include "aip.env.renderer" ( dict "value" .Values.buildEnvs "context" $ ) | nindent 8 }}
        {{- end }}
        readinessProbe:
          failureThreshold: {{ .Values.probe.failureThreshold }}
          httpGet:
            path: {{ .Values.config.contextPath }}/health/ready
            {{- if .Values.tls.enabled }}
            port: 8443
            scheme: HTTPS
            {{ else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          periodSeconds: {{ .Values.probe.periodSeconds }}
          successThreshold: {{ .Values.probe.successThreshold }}
          timeoutSeconds: {{ .Values.probe.timeoutSeconds }}
          initialDelaySeconds: {{ .Values.probe.initialDelaySeconds }}
        livenessProbe:
          failureThreshold: {{ .Values.probe.failureThreshold }}
          httpGet:
            path: {{ .Values.config.contextPath }}/health/live
            {{- if .Values.tls.enabled }}
            port: 8443
            scheme: HTTPS
            {{ else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          periodSeconds: {{ .Values.probe.periodSeconds }}
          successThreshold: {{ .Values.probe.successThreshold }}
          timeoutSeconds: {{ .Values.probe.timeoutSeconds }}
          initialDelaySeconds: {{ .Values.probe.initialDelaySeconds }}
        ports:
          - containerPort: 4444
          {{- if .Values.tls.enabled }}
          - containerPort: 8443
          {{- else }}
          - containerPort: 8080
          {{- end }}
        volumeMounts:
          - name: log-data
            mountPath: /opt/keycloak/data/log/
          {{- if .Values.tls.enabled }}
          - name: cert-cfg
            mountPath: /opt/keycloak/conf/
            readOnly: true
          {{- end }}
          {{- if or (ne .Values.realmImport.configmap "") (ne .Values.realmImport.secret "") }}
          - name: realm-export-json
            mountPath: /opt/keycloak/data/import/realm-export.json
            subPath: realm-export.json
          {{- end }}
      volumes:
        - name: log-data
          persistentVolumeClaim:
            claimName: {{ .Values.logPersistence.existingClaim | default (printf "%s-log" (include "aip.names.fullname" .)) | quote}}
        {{- if .Values.tls.enabled }}
        - name: cert-cfg
          {{- if ne .Values.tls.userDefined.configmap "" }}
          configMap:
            name: {{ .Values.tls.userDefined.configmap }}
          {{- else if ne .Values.tls.userDefined.secret "" }}
          secret:
            secretName: {{ .Values.tls.userDefined.secret }}
          {{- else }}
          secret:
            secretName: {{ include "aip.names.fullname" . }}-tls-secret
          {{- end }}
        {{- end }}
        {{- if or (ne .Values.realmImport.configmap "") (ne .Values.realmImport.secret "") }}
        - name: realm-export-json
          {{- if ne .Values.realmImport.configmap "" }}
          configMap:
            name: {{ .Values.realmImport.configmap }}
          {{- else if ne .Values.realmImport.secret "" }}
          secret:
            secretName: {{ .Values.realmImport.secret }}
          {{- end }}
        {{- end }}
